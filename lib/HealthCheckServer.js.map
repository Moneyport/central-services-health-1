{"version":3,"file":"HealthCheckServer.js","sourceRoot":"","sources":["../src/HealthCheckServer.ts"],"names":[],"mappings":";AAAA;;;;;;;;;;;;;;;;;;;;;;QAsBQ;;;;;;;;;;;;;AAER,sDAA6C;AAC7C,sDAA8B;AAE9B,MAAM,aAAa,GAAG,OAAO,CAAC,2CAA2C,CAAC,CAAA;AAC1E,MAAM,MAAM,GAAG,OAAO,CAAC,mCAAmC,CAAC,CAAC,MAAM,CAAA;AAClE,MAAM,EAAE,UAAU,EAAE,GAAG,OAAO,CAAC,mCAAmC,CAAC,CAAC,WAAW,CAAC,gBAAgB,CAAA;AAEhG;;;;;;;;;GASG;AACH,MAAM,oBAAoB,GAAG,CAAC,WAAgB,EAAoB,EAAE;IAClE,OAAO,CAAO,CAAC,EAAE,CAAC,EAAE,EAAE;QACpB,IAAI,YAAY,CAAA;QAChB,IAAI,YAAY,GAAG,GAAG,CAAA;QACtB,IAAI;YACF,YAAY,GAAG,MAAM,WAAW,CAAC,SAAS,EAAE,CAAA;SAC7C;QAAC,OAAO,GAAG,EAAE;YACZ,MAAM,CAAC,KAAK,CAAC,GAAG,CAAC,OAAO,CAAC,CAAA;SAC1B;QAED,IAAI,CAAC,YAAY,IAAI,YAAY,CAAC,MAAM,KAAK,UAAU,CAAC,EAAE,EAAE;YAC1D,gBAAgB;YAChB,YAAY,GAAG,GAAG,CAAA;SACnB;QAED,OAAO,CAAC,CAAC,QAAQ,CAAC,YAAY,CAAC,CAAC,IAAI,CAAC,YAAY,CAAC,CAAA;IACpD,CAAC,CAAA,CAAA;AACH,CAAC,CAAA;AAmDC,oDAAoB;AAjDtB;;;;;GAKG;AACH,MAAM,UAAU,GAAG,CAAO,QAAsB,EAAE,QAA8B,EAAE,GAAW,EAAE,EAAE;IAC/F,IAAI,CAAC,GAAG,EAAE;QACR,MAAM,cAAI,CAAC,OAAO,CAAC,IAAI,KAAK,CAAC,sBAAsB,CAAC,CAAC,CAAA;KACtD;IACD,MAAM,cAAI,CAAC,OAAO,CAAC,GAAG,CAAC,CAAA;AACzB,CAAC,CAAA,CAAA;AAuCC,gCAAU;AArCZ;;;;;;;;;GASG;AAEH,MAAM,uBAAuB,GAAG,CAAO,IAAY,EAAE,kBAAoC,EAAwB,EAAE;IACjH,kCAAkC;IAClC,MAAM,MAAM,GAAG,cAAI,CAAC,MAAM,CAAC;QACzB,IAAI;QACJ,MAAM,EAAE;YACN,QAAQ,EAAE;gBACR,OAAO,EAAE,aAAa,CAAC,cAAc,EAAE;gBACvC,UAAU,EAAE,UAAU;aACvB;SACF;KACF,CAAC,CAAA;IAEF,MAAM,CAAC,KAAK,CAAC;QACX,MAAM,EAAE,KAAK;QACb,IAAI,EAAE,SAAS;QACf,OAAO,EAAE,kBAAkB;KAC5B,CAAC,CAAA;IAEF,MAAM,MAAM,CAAC,KAAK,EAAE,CAAA;IACpB,MAAM,CAAC,IAAI,CAAC,kCAAkC,MAAM,CAAC,IAAI,CAAC,GAAG,EAAE,CAAC,CAAA;IAChE,OAAO,MAAM,CAAA;AACf,CAAC,CAAA,CAAA;AAGC,0DAAuB","sourcesContent":["/*****\n License\n --------------\n Copyright Â© 2017 Bill & Melinda Gates Foundation\n The Mojaloop files are made available by the Bill & Melinda Gates Foundation under the Apache License, Version 2.0 (the \"License\") and you may not use these files except in compliance with the License. You may obtain a copy of the License at\n http://www.apache.org/licenses/LICENSE-2.0\n Unless required by applicable law or agreed to in writing, the Mojaloop files are distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language governing permissions and limitations under the License.\n Contributors\n --------------\n This is the official list of the Mojaloop project contributors for this file.\n Names of the original copyright holders (individuals or organizations)\n should be listed with a '*' in the first column. People who have\n contributed from an organization can be listed under the organization\n that actually holds the copyright for their contributions (see the\n Gates Foundation organization for an example). Those individuals should have\n their names indented and be marked with a '-'. Email address can be added\n optionally within square brackets <email>.\n * Gates Foundation\n - Name Surname <name.surname@gatesfoundation.com>\n\n * Lewis Daly <lewis@vesselstech.com>\n --------------\n ******/\n\nimport Hapi, { Lifecycle } from '@hapi/hapi';\nimport Boom from '@hapi/boom';\n\nconst ErrorHandling = require('@mojaloop/central-services-error-handling')\nconst Logger = require('@mojaloop/central-services-shared').Logger\nconst { statusEnum } = require('@mojaloop/central-services-shared').HealthCheck.HealthCheckEnums\n\n/**\n * @function defaultHealthHandler\n *\n * @description Given a health check object, return the default\n *   handler for responding to health checks\n *\n * @param {BaseHealthCheck} healthCheck - the BaseHealthCheck subclass\n *\n * @returns {async (response, h) => any} handler - the HapiJS compatible handler for the health check\n */\nconst defaultHealthHandler = (healthCheck: any): Lifecycle.Method => {\n  return async (_, h) => {\n    let responseBody\n    let responseCode = 200\n    try {\n      responseBody = await healthCheck.getHealth()\n    } catch (err) {\n      Logger.error(err.message)\n    }\n\n    if (!responseBody || responseBody.status !== statusEnum.OK) {\n      // Gateway Error\n      responseCode = 502\n    }\n\n    return h.response(responseBody).code(responseCode)\n  }\n}\n\n/**\n * @function failAction\n *\n * @description the failure handler for Hapi. We put this here to make it more testable\n *\n */\nconst failAction = async (_request: Hapi.Request, _handler: Hapi.ResponseToolkit, err?: Error) => {\n  if (!err) {\n    throw Boom.boomify(new Error(`Unknown Server Error`))\n  }\n  throw Boom.boomify(err)\n}\n\n/**\n * @function createHealthCheckServer\n *\n * @description Creates the Hapi HTTP Health check server\n *\n * @param {number} port Port to register the Server against\n * @param {async (response, h) => any} healthCheckHandler A handler that handles HapiJS requests for health\n *\n * @returns {*} server - a HapiJS Server object\n */\n\nconst createHealthCheckServer = async (port: string, healthCheckHandler: Lifecycle.Method): Promise<Hapi.Server> => {\n  //@ts-ignore - type defs are wrong\n  const server = Hapi.server({\n    port,\n    routes: {\n      validate: {\n        options: ErrorHandling.validateRoutes(),\n        failAction: failAction\n      }\n    }\n  })\n\n  server.route({\n    method: 'GET',\n    path: '/health',\n    handler: healthCheckHandler\n  })\n\n  await server.start()\n  Logger.info(`Health Check Server running on ${server.info.uri}`)\n  return server\n}\n\nexport {\n  createHealthCheckServer,\n  defaultHealthHandler,\n  failAction\n}\n"]}